package net.shadervertex.sms.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import net.shadervertex.sms.dto.StudentDto;
import net.shadervertex.sms.entity.Student;
import net.shadervertex.sms.service.StudentService;

@Controller
public class StudentController {
    
    private final StudentService studentService;

    public StudentController(StudentService studentService) {
        this.studentService = studentService;
    }
    
    // Handler method to list students
    @GetMapping("/students")
    public String listStudents(Model model) {
        model.addAttribute("students", studentService.getAllStudents());
        return "students";
    }
    
    // Handler method to display the form for creating a new student
    @GetMapping("/students/new")
    public String createStudentForm(Model model) {
        model.addAttribute("studentDto", new StudentDto());
        return "create_student";
    }
    
    // Handler method to save a new student
    @PostMapping("/students")
    public String saveStudent(@ModelAttribute("studentDto") StudentDto studentDto) {
        Student student = new Student(studentDto.getFirstName(), studentDto.getLastName(), studentDto.getEmail());
        studentService.saveStudent(student);
        return "redirect:/students";
    }
    
    // Handler method to display the form for editing a student
    @GetMapping("/students/edit/{id}")
    public String editStudentForm(@PathVariable Long id, Model model) {
        Student student = studentService.getStudentById(id);
        model.addAttribute("student", student);
        return "edit_student";
    }

    // Handler method to update a student
    @PostMapping("/students/update/{id}")
    public String updateStudent(@PathVariable Long id, @ModelAttribute("student") StudentDto studentDto) {
        Student existingStudent = studentService.getStudentById(id);
        if (existingStudent != null) {
            existingStudent.setFirstName(studentDto.getFirstName());
            existingStudent.setLastName(studentDto.getLastName());
            existingStudent.setEmail(studentDto.getEmail());
            studentService.updateStudent(existingStudent);
        }
        return "redirect:/students";
    }

    // Handler method to delete a student
    @GetMapping("/students/{id}")
    public String deleteStudent(@PathVariable Long id) {
        studentService.deleteStudentById(id);
        return "redirect:/students";
    }
}
