package net.shadervertex.sms.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;

import jakarta.validation.Valid;
import net.shadervertex.sms.dto.StudentDto;
import net.shadervertex.sms.entity.Student; // Import Student entity
import net.shadervertex.sms.service.StudentService;

@Controller
public class StudentController {
    
    private StudentService studentService;

    public StudentController(StudentService studentService) {
        super();
        this.studentService = studentService;
    }
    
    @GetMapping("/students")
    public String listStudents(Model model) {
        model.addAttribute("students", studentService.getAllStudents());
        return "students";
    }
    
    @GetMapping("/students/new")
    public String createStudentForm(Model model) {
        StudentDto student = new StudentDto();
        model.addAttribute("student", student);
        return "create_student";
    }
    
    @PostMapping("/students")
    public String saveStudent(@Valid @ModelAttribute("student") StudentDto studentDto, BindingResult result) {
        if (result.hasErrors()) {
            return "create_student";
        }
        // Convert StudentDto to Student
        Student student = convertToEntity(studentDto);
        studentService.saveStudent(student);
        return "redirect:/students";
    }
    
    @GetMapping("/students/edit/{id}")
    public String editStudentForm(@PathVariable Long id, Model model) {
        Student student = studentService.getStudentById(id);
        // Convert Student to StudentDto
        StudentDto studentDto = convertToDto(student);
        model.addAttribute("student", studentDto);
        return "edit_student";
    }

    @PostMapping("/students/{id}")
    public String updateStudent(@PathVariable Long id,
            @Valid @ModelAttribute("student") StudentDto studentDto,
            BindingResult result,
            Model model) {
        if (result.hasErrors()) {
            return "edit_student";
        }
        // Convert StudentDto to Student
        Student student = convertToEntity(studentDto);
        student.setId(id);
        studentService.updateStudent(student);
        return "redirect:/students";     
    }
    
    @GetMapping("/students/{id}")
    public String deleteStudent(@PathVariable Long id) {
        studentService.deleteStudentById(id);
        return "redirect:/students";
    }
    
    // Utility method to convert StudentDto to Student
    private Student convertToEntity(StudentDto studentDto) {
        return new Student(studentDto.getFirstName(), studentDto.getLastName(), studentDto.getEmail());
    }
    
    // Utility method to convert Student to StudentDto
    private StudentDto convertToDto(Student student) {
        return new StudentDto(student.getFirstName(), student.getLastName(), student.getEmail());
    }
}
