package net.shadervertex.sms;

import com.fasterxml.jackson.databind.ObjectMapper;
import net.shadervertex.sms.controller.StudentController;
import net.shadervertex.sms.entity.Student;
import net.shadervertex.sms.repository.StudentRepository;
import net.shadervertex.sms.service.StudentService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit.jupiter.web.SpringJUnitWebConfig;
import org.springframework.test.web.servlet.MockMvc;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.mockito.Mockito.*;

@SpringJUnitWebConfig
@WebMvcTest(StudentController.class)
@AutoConfigureMockMvc
public class StudentControllerTests {

    private static final String END_POINT_PATH = "/students"; // Update the endpoint path

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private StudentService studentService;

    @MockBean
    private StudentRepository studentRepository;

    @Autowired
    private ObjectMapper objectMapper;

    @Test
    public void testGetStudents() throws Exception {
        mockMvc.perform(get(END_POINT_PATH))
                .andExpect(status().isOk());
    }

    @Test
    public void testGetStudentById() throws Exception {
        mockMvc.perform(get(END_POINT_PATH + "/{id}", 1L))
                .andExpect(status().is3xxRedirection())
                .andExpect(redirectedUrl(END_POINT_PATH));
    }

   

   

    // Add other test methods for edit, update, delete endpoints

}
