package net.shadervertex.sms.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;

import net.shadervertex.sms.dto.StudentDto;
import net.shadervertex.sms.entity.Student;
import net.shadervertex.sms.service.StudentService;

@Controller
public class StudentController {
	
	private StudentService studentService;

	public StudentController(StudentService studentService) {
		super();
		this.studentService = studentService;
	}
	
	// handler method to handle list students and return mode and view
	@GetMapping("/students")
	public String listStudents(Model model) {
		model.addAttribute("students", studentService.getAllStudents());
		return "students";
	}
	
	@GetMapping("/students/new")
	public String createStudentForm(Model model) {
		
		// create student object to hold student form data
		Student student = new Student();
		model.addAttribute("student", student);
		return "create_student";
		
	}
	
	@PostMapping("/students")
	public String saveStudent(@ModelAttribute("student") Student student) {
		studentService.saveStudent(student);
		return "redirect:/students";
	}
	
	@GetMapping("/students/edit/{id}")
	public String editStudentForm(@PathVariable Long id, Model model) {
		model.addAttribute("student", studentService.getStudentById(id));
		return "edit_student";
	}

	@PostMapping("/students/update/{id}")
	public String updateStudent(@PathVariable Long id,
	        @ModelAttribute("student") StudentDto studentDto) {
	    
	    // Fetch the student by ID
	    Student existingStudent = studentService.getStudentById(id);
	    if (existingStudent != null) {
	        // Update student details
	        existingStudent.setFirstName(studentDto.getFirstName());
	        existingStudent.setLastName(studentDto.getLastName());
	        existingStudent.setEmail(studentDto.getEmail());
	        
	        // Save the updated student
	        studentService.updateStudent(existingStudent);
	    }
	    // Redirect to the list of students
	    return "redirect:/students";
	}

	
	// handler method to handle delete student request
	
	@GetMapping("/students/{id}")
	public String deleteStudent(@PathVariable Long id) {
		studentService.deleteStudentById(id);
		return "redirect:/students";
	}
	
}