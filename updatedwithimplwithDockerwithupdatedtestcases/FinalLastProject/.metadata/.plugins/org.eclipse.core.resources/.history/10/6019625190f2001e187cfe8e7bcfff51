package net.shadervertex.sms;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

import java.util.Arrays;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import com.fasterxml.jackson.databind.ObjectMapper;

import net.shadervertex.sms.controller.StudentController;
import net.shadervertex.sms.dto.StudentDto;
import net.shadervertex.sms.entity.Student;
import net.shadervertex.sms.service.StudentService;

@WebMvcTest(StudentController.class)
public class StudentControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;

    @MockBean
    private StudentService studentService;

    @Test
    public void testListStudents() throws Exception {
        Student student1 = new Student("John", "Doe", "john@example.com");
        Student student2 = new Student("Alice", "Smith", "alice@example.com");

        when(studentService.getAllStudents()).thenReturn(Arrays.asList(student1, student2));

        mockMvc.perform(get("/students"))
                .andExpect(status().isOk())
                .andExpect(view().name("students"))
                .andExpect(model().attributeExists("students"))
                .andExpect(model().attribute("students", Arrays.asList(student1, student2)));
    }

    @Test
    public void testCreateStudent() throws Exception {
        StudentDto studentDto = new StudentDto("John", "Doe", "john@example.com");
        Student student = new Student("John", "Doe", "john@example.com");

        doNothing().when(studentService).saveStudent(any(Student.class));

        mockMvc.perform(post("/students")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(studentDto)))
                .andExpect(status().is3xxRedirection())
                .andExpect(redirectedUrl("/students"));
    }

    // Add more test cases for edit, update, delete operations
}
