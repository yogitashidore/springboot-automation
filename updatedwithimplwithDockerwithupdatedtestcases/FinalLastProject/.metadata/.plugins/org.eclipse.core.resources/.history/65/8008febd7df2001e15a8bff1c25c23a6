package net.shadervertex.sms;

import static org.hamcrest.CoreMatchers.is;
import static org.mockito.Mockito.times;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;

import com.fasterxml.jackson.databind.ObjectMapper;

import net.shadervertex.sms.controller.StudentController;
import net.shadervertex.sms.entity.Student;
import net.shadervertex.sms.service.StudentService;

@WebMvcTest(StudentController.class)
public class StudentControllerTest {

    private static final String END_POINT_PATH = "/students";

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;

    @MockBean
    private StudentService studentService;

    @BeforeEach
    void setUp() {
        // Add any common setup logic here
    }

    @Test
    public void testAddShouldReturn400BadRequest() throws Exception {
        Student newStudent = new Student();

        String requestBody = objectMapper.writeValueAsString(newStudent);

        mockMvc.perform(post(END_POINT_PATH).contentType("application/json")
                .content(requestBody))
                .andExpect(status().isBadRequest())
                .andDo(print());
    }

    @Test
    public void testAddShouldReturn201Created() throws Exception {
        Student newStudent = new Student(null, "John", "Doe", "john@example.com");

        Mockito.when(studentService.saveStudent(newStudent)).thenReturn(newStudent);

        String requestBody = objectMapper.writeValueAsString(newStudent);

        mockMvc.perform(post(END_POINT_PATH).contentType("application/json")
                .content(requestBody))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.firstName", is("John")))
                .andExpect(jsonPath("$.lastName", is("Doe")))
                .andExpect(jsonPath("$.email", is("john@example.com")))
                .andDo(print());

        Mockito.verify(studentService, times(1)).saveStudent(newStudent);
    }

    @Test
    public void testGetShouldReturn404NotFound() throws Exception {
        Long studentId = 123L;
        String requestURI = END_POINT_PATH + "/" + studentId;

        Mockito.when(studentService.getStudentById(studentId)).thenReturn(null);

        mockMvc.perform(get(requestURI))
                .andExpect(status().isNotFound())
                .andDo(print());
    }

    @Test
    public void testGetShouldReturn200OK() throws Exception {
        Long studentId = 1L;
        String requestURI = END_POINT_PATH + "/" + studentId;
        String email = "john@example.com";

        Student student = new Student(studentId, "John", "Doe", email);

        Mockito.when(studentService.getStudentById(studentId)).thenReturn(student);

        mockMvc.perform(get(requestURI))
                .andExpect(status().isOk())
                .andExpect(content().contentType("application/json"))
                .andExpect(jsonPath("$.email", is(email)))
                .andDo(print());
    }

    @Test
    public void testListShouldReturn204NoContent() throws Exception {
        Mockito.when(studentService.getAllStudents()).thenReturn(new ArrayList<>());

        mockMvc.perform(get(END_POINT_PATH))
                .andExpect(status().isNoContent())
                .andDo(print());
    }

    @Test
    public void testListShouldReturn200OK() throws Exception {
        Student student1 = new Student(1L, "John", "Doe", "john@example.com");
        Student student2 = new Student(2L, "Jane", "Smith", "jane@example.com");

        List<Student> students = List.of(student1, student2);

        Mockito.when(studentService.getAllStudents()).thenReturn(students);

        mockMvc.perform(get(END_POINT_PATH))
                .andExpect(status().isOk())
                .andExpect(content().contentType("application/json"))
                .andExpect(jsonPath("$[0].email", is("john@example.com")))
                .andExpect(jsonPath("$[1].email", is("jane@example.com")))
                .andDo(print());
    }

    @Test
    public void testDeleteShouldReturn404NotFound() throws Exception {
        Long studentId = 123L;
        String requestURI = END_POINT_PATH + "/" + studentId;

        Mockito.doThrow(StudentNotFoundException.class).when(studentService).deleteStudentById(studentId);

        mockMvc.perform(delete(requestURI))
                .andExpect(status().isNotFound())
                .andDo(print());
    }

    @Test
    public void testDeleteShouldReturn204NoContent() throws Exception {
        Long studentId = 1L;
        String requestURI = END_POINT_PATH + "/" + studentId;

        mockMvc.perform(delete(requestURI))
                .andExpect(status().isNoContent())
                .andDo(print());
    }

    @Test
    public void testUpdateShouldReturn404NotFound() throws Exception {
        Long studentId = 123L;
        String requestURI = END_POINT_PATH + "/" + studentId;

        Student student = new Student(studentId, "John", "Doe", "john@example.com");

        Mockito.when(studentService.updateStudent(student)).thenThrow(StudentNotFoundException.class);

        String requestBody = objectMapper.writeValueAsString(student);

        mockMvc.perform(put(requestURI).contentType("application/json").content(requestBody))
                .andExpect(status().isNotFound())
                .andDo(print());
    }

    @Test
    public void testUpdateShouldReturn400BadRequest() throws Exception {
        Long studentId = 123L;
        String requestURI = END_POINT_PATH + "/" + studentId;

        Student student = new Student(studentId, "", "", "");

        String requestBody = objectMapper.writeValueAsString(student);

        mockMvc.perform(put(requestURI).contentType("application/json").content(requestBody))
                .andExpect(status().isBadRequest())
                .andDo(print());
    }

    @Test
    public void testUpdateShouldReturn200OK() throws Exception {
        Long studentId = 1L;
        String requestURI = END_POINT_PATH + "/" + studentId;

        Student student = new Student(studentId, "John", "Doe", "john@example.com");

        Mockito.when(studentService.updateStudent(student)).thenReturn(student);

        String requestBody = objectMapper.writeValueAsString(student);

        mockMvc.perform(put(requestURI).contentType("application/json").content(requestBody))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.email", is("john@example.com")))
                .andDo(print());
    }
}
